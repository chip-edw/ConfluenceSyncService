// <auto-generated />
using System;
using ConfluenceSyncService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConfluenceSyncService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250921181905_AddCustomerIdToTableSyncState")]
    partial class AddCustomerIdToTableSyncState
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("ConfluenceSyncService.Models.ConfigStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ConfigStore");
                });

            modelBuilder.Entity("ConfluenceSyncService.Models.SyncProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfluenceDashboardPageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfluenceDatabaseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfluenceSpaceKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SharePointListId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SharePointSiteId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SyncProfile");
                });

            modelBuilder.Entity("ConfluenceSyncService.Models.SyncState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfluenceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastConfluenceModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSharePointModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSource")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSyncedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("SharePointId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SyncProfileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SyncProfileId");

                    b.HasIndex("SharePointId", "ConfluenceId");

                    b.ToTable("SyncStates");
                });

            modelBuilder.Entity("ConfluenceSyncService.Models.TableSyncState", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfluencePageId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ConfluencePageVersion")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastConfluenceModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSharePointModifiedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSyncSource")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSyncStatus")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSyncedUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("SharePointItemId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SyncTracker")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConfluencePageId")
                        .IsUnique();

                    b.ToTable("TableSyncStates");
                });

            modelBuilder.Entity("ConfluenceSyncService.Models.TaskIdMap", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AckExpiresUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("AckVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<string>("AnchorDateType")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LastChaseAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastMessageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("PhaseTasks");

                    b.Property<DateTimeOffset?>("NextChaseAtUtcCached")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhaseName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("RootMessageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpItemId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StartOffsetDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("reserved");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamId")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkflowId")
                        .HasColumnType("TEXT");

                    b.HasKey("TaskId");

                    b.HasIndex("AckExpiresUtc")
                        .HasDatabaseName("IX_TaskIdMap_AckExpiresUtc");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("IX_TaskIdMap_CorrelationId");

                    b.HasIndex("NextChaseAtUtcCached")
                        .HasDatabaseName("IX_TaskIdMap_NextChaseAtUtcCached");

                    b.HasIndex("SpItemId")
                        .IsUnique()
                        .HasDatabaseName("IX_TaskIdMap_SpItemId");

                    b.HasIndex("TeamId", "ChannelId")
                        .HasDatabaseName("IX_TaskIdMap_TeamId_ChannelId");

                    b.HasIndex("CustomerId", "PhaseName", "TaskName", "WorkflowId")
                        .HasDatabaseName("IX_TaskIdMap_CustomerId_PhaseName_TaskName_WorkflowId");

                    b.ToTable("TaskIdMap", (string)null);
                });

            modelBuilder.Entity("ConfluenceSyncService.Models.SyncState", b =>
                {
                    b.HasOne("ConfluenceSyncService.Models.SyncProfile", "SyncProfile")
                        .WithMany()
                        .HasForeignKey("SyncProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SyncProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
